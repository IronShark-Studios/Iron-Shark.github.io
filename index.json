[{"content":"","date":"2022-12-28","permalink":"/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"","date":"2022-12-28","permalink":"/tags/emacs/","section":"Tags","summary":"","title":"Emacs"},{"content":"","date":"2022-12-28","permalink":"/","section":"IronShark","summary":"","title":"IronShark"},{"content":"","date":"2022-12-28","permalink":"/tags/linux/","section":"Tags","summary":"","title":"Linux"},{"content":"","date":"2022-12-28","permalink":"/tags/nix/","section":"Tags","summary":"","title":"Nix,"},{"content":" Introduction This article describes my attempts to create a set of https://leanpub.com/lit-config/read. With each file containing all the settings and customizations I use for a machine in a single location. In the hope that the highly documented nature of literate programming will allow better understanding and long term maintainability.\nAdditionally configuration files are often shared, or used as teaching tools. Ultimately my goal is for a non-programmer to be able to look through my configuration and understand what the pieces are doing. Even if they do not understand the programming language they are written in. To do this I am using a combination of the tools discussed below.\nNix I have been using NixOS for around four months, and have transitioned my primary workstation fully to the trifecta of https://nixos.org/, https://nixos.wiki/wiki/Flakes, and https://nixos.wiki/wiki/Home_Manager. This article wont this won\u0026#39;t discuss Flakes much as in this situation the Flake deals more with managing the repository that holds the collection of multiple configuration files. Eg. The https://github.com/Iron-Shark/Technonomicon contains both, the Vortex, and Voyager (still to be developed) single file configurations.\nNixOS supports the use of a declaratively configuration file, and Home-manager extends this further allowing you to manage the configuration of applications declaratively even if they do not normally support doing so. For those not familiar. https://www.wikiwand.com/en/Declarative_programming is the process of describing the final result that the program should produce, rather than the steps the computer should use to produce it. This makes a system using these to applications uniquely suited to this type of One File System layouts. These benifits manifest in a few major features.\nconfiguration.nix : By default NixOS supports a single centralized configuration file. This can be used manage most of the core systems level configuration options. Including Device Drivers and Services, System Language and Location, Users, and Security Permissions. It also allows you to specify a set of packages that will be available to all users. que.nix : Standard NixOS supports installing user specific packages as part of the configuration.nix file mentioned previously. However if you are using home-manager, from what I understand. It is generally considered best practice to separate all user related instructions into their own file. I name these after the user they are written for. Importantly in addition to allowing you to specify what packages should be installed, home-manger allows you to manage those applications. The uses of home-manager include :\nReplacing application specific dot files with home-manger options. This code replaces both the normal .gitconfig file, and the global .gitignore file.\nprograms.git = { package = pkgs.gitFull; enable = true; userName = \u0026#34;Que\u0026#34;; userEmail = \u0026#34;git@ironshark.org\u0026#34;; ignores = [ \u0026#34;*~\u0026#34; \u0026#34;.*~\u0026#34; \u0026#34;\u0026#39;#*#\u0026#39;\u0026#34; \u0026#34;.*.swp\u0026#34; ]; }; The ability to create a file in the users directory, to be used by other applications. This file can be used by another application. I prefer this over a normal symlink, becuase it places the file in the nix store. Removing the need to always have the source repository in the same location.\nhome.file.\u0026#34;polybar-CPU-temp.sh\u0026#34; = { target = \u0026#34;.config/polybar/polybar-CPU-temp.sh\u0026#34;; executable = true; text = \u0026#39;\u0026#39; #!/bin/sh sensors | grep \u0026#34;Package id 0:\u0026#34; | tr -d \u0026#39;+\u0026#39; | awk \u0026#39;{print $4}\u0026#39; \u0026#39;\u0026#39;; }; The ability to copy entire directories into the users home directory. I use this to place my Emacs configuration in my home directory, since it consists of several files and would be unwieldly to convert to Nix.\nhome.file.\u0026#34;emacs\u0026#34; = { source = ./Emacs; recursive = true; target = \u0026#34;.config/emacs\u0026#34;; }; Emacs \u0026amp; Org https://www.gnu.org/software/emacs/ and https://orgmode.org/ are the core of this project. Org-Mode is a Mark Up extension for Emacs. Supporting the use of multiple levels of sub-headings, hyperlinks, and more. Including embedded code blocks, and exporting those code blocks to external files. This process is called https://orgmode.org/manual/Working-with-Source-Code.html the file. It can be configured so that all the code blocks below a specific heading will go to the same target file. This, is the central design pattern of a single file configuration. Each Target file is tied to a heading level, with the headings below them describing the functions of the code contained by them.\nTo add a tangle target to a heading. You would use this code this sytle of properties block. Ignore the leading single quotes. \u0026#39;* Example Heading \u0026#39;:PROPERTIES: \u0026#39;:header-args: :tangle ~/path/to/target \u0026#39;:END: Then Use a normal Org-src block as shown below. I put this at the top of all my tangled files. Note: This warning is commented with # for nix. Ignore the leading single quotes. \u0026#39;#+begin_src nix \u0026#39;# WARNING : This file was generated by vortex.org \u0026#39;# DO NOT MODIFY THIS FILE! \u0026#39;# Any changes made here will be overwritten. \u0026#39;#+end_src When put together the whole thing looks like this. With all of the sub-heading being tangled to the same target file, specified in the top level heading. Ignore the leading single quotes. \u0026#39;* Example Heading \u0026#39;:PROPERTIES: \u0026#39;:header-args: :tangle ~/path/to/target \u0026#39;:END: \u0026#39;** Tangled File Warning \u0026#39;#+begin_src nix \u0026#39;# WARNING : This file was generated by vortex.org \u0026#39;# DO NOT MODIFY THIS FILE! \u0026#39;# Any changes made here will be overwritten. \u0026#39;#+end_src \u0026#39;** Other Sub-Heading 1 \u0026#39;Normal Text goes here. \u0026#39;** Other Sub-Heading 2 Any nomral text not included in the SRC-Blocks will not be tangled to the target file.\nTangling files can be done with either M-x org-babel-tangle, or it\u0026#39;s default hot key of C-c C-v t. Why use a single file configuration In addition to the benefits inherent with https://www.wikiwand.com/en/Literate_programming, this layout allows me to simplify the management of several files preforming similar functions. Rather than needing to move through an entire sub-directory within the flake repository. All of the files can be accessed and modified from the machine-name.org file. It also ties my Emacs configuration to my NixOS system generation in a meaningful way, something I would like to continue integrating. Also having a centralized \u0026#34;single source of truth\u0026#34;. Helps to make finding specific configuration options easier, and prevent duplicated or conflicting settings.\nOverall while there are definately more issues to be worked out. I am hopefull that this will be a worth while investment going forward.\nResources https://github.com/Iron-Shark/Technonomicon ","date":"2022-12-28","permalink":"/posts/onefileconfiguration/","section":"Posts","summary":"Introduction This article describes my attempts to create a set of https://leanpub.com/lit-config/read. With each file containing all the settings and customizations I use for a machine in a single location.","title":"One File System Configuration with NixOS and Emacs Org-Mode"},{"content":"","date":"2022-12-28","permalink":"/posts/","section":"Posts","summary":"","title":"Posts"},{"content":"","date":"2022-12-28","permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"","date":"2022-12-28","permalink":"/categories/technology/","section":"Categories","summary":"","title":"Technology"},{"content":" As a part of writing the \u0026#34;https://ironshark.org/technology/2022/09/04/linux-journey.html\u0026#34; article, and my larger project of switching to https://nixos.org/ for daily use. I decided to go through all of the https://linuxjourney.com/ lessons again. This time from the perspective of someone familiar with the fundamentals, and experienced with basic use of a Linux based operating system. For perspective I have basic user experience with both https://www.debian.org/ and https://archlinux.org/, and have used both as my primary operating system.\nMy overall impression remains that it is a great resource. I wanted to add an additional caveat to that though. If you are simply trying to get your feet wet, or do simple interactions with a Linux machine that is maintained for you. Then it is likely enough to give you the skills needed to interact with a preconfigured system. If however you are trying to configure a personal computer, or build a set of tools for professional projects. Then you are definitely going to need an additional resource, namely. Your chosen distribution\u0026#39;s user manual.\nI mention this specifically because it is something that could be easily overlooked or misunderstood by someone coming from a Windows OS background. This is due to the fact that Linux is only the core of the operating system. So fittingly Linux Journey really only discusses the Linux core utilities that are found on almost all distributions, with only a passing mention of the differences between them. It will teach how to use the tools that come with Linux, but not what to do with those tools to achieve your goals. Overall, I\u0026#39;m glad I went through the tutorials again. I feel like I picked up a bit more information now that I have the context to appreciate, and my opinion overall is the same. Linux Journey is an excellent resource. Just make sure that you are also consulting your chosen disto\u0026#39;s user manual, FAQ\u0026#39;s, and tutorials.\n","date":"2022-09-04","permalink":"/posts/linuxjourney/","section":"Posts","summary":"As a part of writing the \u0026#34;https://ironshark.org/technology/2022/09/04/linux-journey.html\u0026#34; article, and my larger project of switching to https://nixos.org/ for daily use. I decided to go through all of the https://linuxjourney.com/ lessons again.","title":"A Linux Journey Retrospective"},{"content":"","date":"2022-09-04","permalink":"/tags/linux_for_beginners/","section":"Tags","summary":"","title":"Linux_for_beginners,"},{"content":"","date":"2022-09-04","permalink":"/categories/personal/","section":"Categories","summary":"","title":"Personal"},{"content":"","date":"2022-09-04","permalink":"/tags/site_update/","section":"Tags","summary":"","title":"Site_Update"},{"content":" Personal blogging can take a lot of forms, and the goals for each site can vary wildly from person to person. For me, those goals are.\nCreate a public facing outlet for written works. This isn\u0026#39;t to say that I expect this blog to become wildly popular. I don\u0026#39;t. Rather the \u0026#34;threat\u0026#34; of unknown people seeing what I have written encourages me to try and publish things in a finished state. Having never really needed to do that before I hope that this will improve my writing, storytelling, and general communication skills. Largely it amounts to a creative writing exercise.\nShare project reports, and the lessons learned from them. In the hopes that others can one day avoid the mistakes I make as part of my learning process. More generally, I hope that the process of creating these reports will encourage me to better document my projects for later reference, and to be able to share that information with friends and collaborators. Also having a measurable sense of progress on those projects could be a great source of motivation.\nCreate a personal \u0026amp; professional gallery of completed work. This is a longer term goal, but as I complete more projects. I hope to begin curating them into a gallery or portfolio highlighting my major achievements. The overall goal being that the contents of my about me page, which should also include a CV will act as an introduction to my body of work.\n","date":"2022-09-04","permalink":"/posts/whyblog/","section":"Posts","summary":"Personal blogging can take a lot of forms, and the goals for each site can vary wildly from person to person. For me, those goals are.\nCreate a public facing outlet for written works.","title":"Who, what, and Why. Creating a personal blog."},{"content":"","date":"0001-01-01","permalink":"/authors/","section":"Authors","summary":"","title":"Authors"},{"content":"","date":"0001-01-01","permalink":"/series/","section":"Series","summary":"","title":"Series"}]