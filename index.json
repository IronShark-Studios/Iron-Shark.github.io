[{"content":"","date":"2022-12-28","permalink":"/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"","date":"2022-12-28","permalink":"/tags/emacs/","section":"Tags","summary":"","title":"Emacs,"},{"content":"","date":"2022-12-28","permalink":"/","section":"IronShark","summary":"","title":"IronShark"},{"content":"","date":"2022-12-28","permalink":"/tags/linux/","section":"Tags","summary":"","title":"Linux,"},{"content":"","date":"2022-12-28","permalink":"/tags/nix/","section":"Tags","summary":"","title":"Nix"},{"content":" Introduction This article describes my attempts to create a set of https://leanpub.com/lit-config/read. With each file containing all the settings and customizations I use for a machine in a single location. In the hope that the highly documented nature of literate programming will allow better understanding and long term maintainability.\nAdditionally configuration files are often shared, or used as teaching tools. Ultimately my goal is for a non-programmer to be able to look through my configuration and understand what the pieces are doing. Even if they do not understand the programming language they are written in. To do this I am using a combination of the tools discussed below.\nNix I have been using NixOS for around four months, and have transitioned my primary workstation fully to the trifecta of https://nixos.org/, https://nixos.wiki/wiki/Flakes, and https://nixos.wiki/wiki/Home_Manager. This article wont this won\u0026#39;t discuss Flakes much as in this situation the Flake deals more with managing the repository that holds the collection of multiple configuration files. Eg. The https://github.com/Iron-Shark/Technonomicon contains both, the Vortex, and Voyager (still to be developed) single file configurations.\nNixOS supports the use of a declaratively configuration file, and Home-manager extends this further allowing you to manage the configuration of applications declaratively even if they do not normally support doing so. For those not familiar. https://www.wikiwand.com/en/Declarative_programming is the process of describing the final result that the program should produce, rather than the steps the computer should use to produce it. This makes a system using these to applications uniquely suited to this type of One File System layouts. These benifits manifest in a few major features.\nconfiguration.nix : By default NixOS supports a single centralized configuration file. This can be used manage most of the core systems level configuration options. Including Device Drivers and Services, System Language and Location, Users, and Security Permissions. It also allows you to specify a set of packages that will be available to all users. que.nix : Standard NixOS supports installing user specific packages as part of the configuration.nix file mentioned previously. However if you are using home-manager, from what I understand. It is generally considered best practice to separate all user related instructions into their own file. I name these after the user they are written for. Importantly in addition to allowing you to specify what packages should be installed, home-manger allows you to manage those applications. The uses of home-manager include :\nReplacing application specific dot files with home-manger options. This code replaces both the normal .gitconfig file, and the global .gitignore file.\nprograms.git = { package = pkgs.gitFull; enable = true; userName = \u0026#34;Que\u0026#34;; userEmail = \u0026#34;git@ironshark.org\u0026#34;; ignores = [ \u0026#34;*~\u0026#34; \u0026#34;.*~\u0026#34; \u0026#34;\u0026#39;#*#\u0026#39;\u0026#34; \u0026#34;.*.swp\u0026#34; ]; }; The ability to create a file in the users directory, to be used by other applications. This file can be used by another application. I prefer this over a normal symlink, becuase it places the file in the nix store. Removing the need to always have the source repository in the same location.\nhome.file.\u0026#34;polybar-CPU-temp.sh\u0026#34; = { target = \u0026#34;.config/polybar/polybar-CPU-temp.sh\u0026#34;; executable = true; text = \u0026#39;\u0026#39; #!/bin/sh sensors | grep \u0026#34;Package id 0:\u0026#34; | tr -d \u0026#39;+\u0026#39; | awk \u0026#39;{print $4}\u0026#39; \u0026#39;\u0026#39;; }; The ability to copy entire directories into the users home directory. I use this to place my Emacs configuration in my home directory, since it consists of several files and would be unwieldly to convert to Nix.\nhome.file.\u0026#34;emacs\u0026#34; = { source = ./Emacs; recursive = true; target = \u0026#34;.config/emacs\u0026#34;; }; Emacs \u0026amp; Org https://www.gnu.org/software/emacs/ and https://orgmode.org/ are the core of this project. Org-Mode is a Mark Up extension for Emacs. Supporting the use of multiple levels of sub-headings, hyperlinks, and more. Including embedded code blocks, and exporting those code blocks to external files. This process is called https://orgmode.org/manual/Working-with-Source-Code.html the file. It can be configured so that all the code blocks below a specific heading will go to the same target file. This, is the central design pattern of a single file configuration. Each Target file is tied to a heading level, with the headings below them describing the functions of the code contained by them.\nTo add a tangle target to a heading. You would use this code this sytle of properties block. Ignore the leading single quotes. \u0026#39;* Example Heading \u0026#39;:PROPERTIES: \u0026#39;:header-args: :tangle ~/path/to/target \u0026#39;:END: Then Use a normal Org-src block as shown below. I put this at the top of all my tangled files. Note: This warning is commented with # for nix. Ignore the leading single quotes. \u0026#39;#+begin_src nix \u0026#39;# WARNING : This file was generated by vortex.org \u0026#39;# DO NOT MODIFY THIS FILE! \u0026#39;# Any changes made here will be overwritten. \u0026#39;#+end_src When put together the whole thing looks like this. With all of the sub-heading being tangled to the same target file, specified in the top level heading. Ignore the leading single quotes. \u0026#39;* Example Heading \u0026#39;:PROPERTIES: \u0026#39;:header-args: :tangle ~/path/to/target \u0026#39;:END: \u0026#39;** Tangled File Warning \u0026#39;#+begin_src nix \u0026#39;# WARNING : This file was generated by vortex.org \u0026#39;# DO NOT MODIFY THIS FILE! \u0026#39;# Any changes made here will be overwritten. \u0026#39;#+end_src \u0026#39;** Other Sub-Heading 1 \u0026#39;Normal Text goes here. \u0026#39;** Other Sub-Heading 2 Any nomral text not included in the SRC-Blocks will not be tangled to the target file.\nTangling files can be done with either M-x org-babel-tangle, or it\u0026#39;s default hot key of C-c C-v t. Why use a single file configuration In addition to the benefits inherent with https://www.wikiwand.com/en/Literate_programming, this layout allows me to simplify the management of several files preforming similar functions. Rather than needing to move through an entire sub-directory within the flake repository. All of the files can be accessed and modified from the machine-name.org file. It also ties my Emacs configuration to my NixOS system generation in a meaningful way, something I would like to continue integrating. Also having a centralized \u0026#34;single source of truth\u0026#34;. Helps to make finding specific configuration options easier, and prevent duplicated or conflicting settings.\nOverall while there are definately more issues to be worked out. I am hopefull that this will be a worth while investment going forward.\nResources https://github.com/Iron-Shark/Technonomicon ","date":"2022-12-28","permalink":"/posts/onefileconfiguration/","section":"Posts","summary":"Introduction This article describes my attempts to create a set of https://leanpub.com/lit-config/read. With each file containing all the settings and customizations I use for a machine in a single location.","title":"One File System Configuration with NixOS and Emacs Org-Mode"},{"content":"","date":"2022-12-28","permalink":"/posts/","section":"Posts","summary":"","title":"Posts"},{"content":"","date":"2022-12-28","permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"","date":"2022-12-28","permalink":"/categories/technology/","section":"Categories","summary":"","title":"Technology"},{"content":" Introduction In my experience, every hobby has a few coreâ€¦ disagreements. Usually these are small and relatively benign differences based on personal preference, with members of that community advocating for their prefered solution. Among programmers, text editor of choice is one of the more prominent ones. Vim, Visual Studio Code, Emacs, or any other solution you can imagine will have its own dedicated group of supporters. This post will discuss my preferred solution, and some of the features that make me choose it over other options.\n\u0026#34;A great operating system, lacking only a good text editor\u0026#34;. These are words often lobbed jokingly at Emacs users, I ironically agree. While definitely not an operating system, Emacs really starts to come into its own when you view it as a \u0026#39;productivity environment\u0026#39;. Rather than a simple text editor. Most of what I do with a computer involves text manipulation. Programming, email, discord/slack, web browsing, are all basically the same task. Each wrapped in a custom interface. Emacs gives me the ability to integrate all of these tasks into a single user interface, including shared shortcuts, hotkeys, and the use of macros or other programmatic interfaces provided by Emacs. This post is going to be the first in a series documenting my attempt to create a computer workflow that focuses on avoiding use of a mouse. Instead making use of these keyboard hotkeys, and shortcuts.\nEXWM, EVIL, and PolyBar To start with I wanted to discuss some terminology. Most of what someone interacts with, when using a computer is a part of the \u0026#34;display environment\u0026#34;. Some operating systems can be configured to use one of several display environments, or something known as a \u0026#34;window manager\u0026#34;. Which performs a similar function to a display environment though in a much more minimal way. Window managers generally do not include things like wifi managers, volume or brightness controls, or other GUI (graphical user interface) applications to configure the system. Tiling window managers, take this minimalism further by removing the need to use a mouse to position application windows. Instead locking them together as part of a larger grid, and using hotkeys to adjust how the screen is divided among these tiles. EXWM (Emacs X Window Manager) is one such tiling window manager.\nEXWM is an Emacs package that I installed using straight.el. A functional package manager internal to Emacs. It uses the Emacs-Daemon to contain other applications inside an Emacs Frame. Allowing you to use your normal Emacs inputs to interact with non-Emacs programs. This includes rearranging windows, copy, paste, registers, and more generally it homogenizes how I interact with a variety of programs. Eventually, I plan to further extend this with applications like Xkey-snail. Which allows you to mask non-Emacs hot-keys under Emacs Commands. Currently the one major downside of EXWM is that Emacs is single threaded. Meaning that performing certain operations can freeze your entire system until that operation has completed. However there is an ongoing project to update Emacs to multi-threading, and I have not actually encountered a lock up in real world use.\nVisually EXWM is hugely customizable. Currently in addition to the Emacs Mode-Line displaying file specific information at the bottom of each buffer. I use PolyBar to display system wide information, like which workspace is currently active, RAM and CPU usage, and the date and time. Configuring PolyBar to match my Emacs theme was easy, and while I still have a lot I would like to do to further refine both. I was able to get something visually pleasing, and functional in just a couple of hours of tinkering.\nhttps://github.com/Iron-Shark/Iron-Shark.github.io/blob/main/_assets/Banners/deskTop.png?raw=true An example screenshot of my Desktop\nI wanted to address one other thing as a part of this post. Text editing with Emacs. Now as I said earlier, I largely agree that Emacs on it\u0026#39;s own, is not the best choice of text editor. I find the Emacs chord system to be a bit clunky for the most commonly used text editing commands, and honestly I think modal editing as offered by Vim is betterâ€¦ So thats what I use. Emacs EVIL (Extensible VI Layer), adds modal inputs to the normal Emacs text editing modes. For me this is the perfect solution, as it allows me to use the modal inputs for the most commonly used commands that often need to be used multiple times or in multiple combinations in quick succession. While still having the Emacs key chords, and longer form \u0026#39;M-x\u0026#39; style input for less commonly used, or system level commands.\nFinal Thoughts I still have a ton of work left to get everything to how I ultimately want it to be, but I hope this process shows one of the greatest strengths of both Linux, and Emacs. Extensibility. The ability to configure, or even replace some of the core functionality of a piece of software so that it works in a way that is specifically beneficial to me and my workflow. I will admit though that this process is not necessarily beginner friendly. While the Linux community has made huge inroads towards being more usable by non-technical people, this level of customization can still take a significant amount of work. Reading documentation, troubleshooting conflicts caused by changes, or even just learning what you actually need the software to do, and how to get it to do it. All of these will take time, but in my opinion are absolutely worth the effort.\nIf you are interested in trying a setup like this for yourself, consider checking out my posts with the \u0026#34;Linux for beginners\u0026#34; tag to see how you can get a Linux VM running with very little effort on a Windows computer. If you are specifically interested in EXWM, I would strongly recommend getting experience with normal Emacs first. While WSL does not support EXWM, it can be used to learn the core Emacs Usage. Lastly, if you are interested in learning more about EVIL or Modal editing, I suggest checking out the tutor built into Vim, or Doom Emacs. Which is a preconfigured version of Emacs that includes EVIL and simplifies a lot of basic configuration. Links found Below.\nResources Config Files https://github.com/Iron-Shark/Technonomicon Show my complete current configuration. https://nixos.org/ Adding this to Configuration.nix enables EXWM. services.xserver.displayManager.lightdm.enable = true; services.xserver.windowManager.exwm.enable = true; https://github.com/ch11ng/exwm https://github.com/emacs-evil/evil Adding this to init.el enables Evil Mode and EXWM, this assumes use of Straight.el package manager and Use package. (server-start) (use-package exwm :init :config (setq exwm-workspace-show-all-buffers t) (setq exwm-layout-show-all-buffers t) (add-hook \u0026#39;exwm-update-class-hook (lambda () (exwm-workspace-rename-buffer exwm-class-name))) (with-eval-after-load \u0026#39;evil (evil-set-initial-state \u0026#39;exwm-mode \u0026#39;motion)) ;; do not forward anything besides keys defined with ;; `exwm-input-set-key\u0026#39; and `exwm-mode-map\u0026#39; (setq exwm-input-prefix-keys \u0026#39;()) (exwm-enable)) (use-package evil :init (setq evil-want-integration t evil-want-keybinding nil evil-want-C-u-scroll t evil-want-C-i-jump nil evil-respect-visual-line-mode t evil-undo-system \u0026#39;undo-tree) :config (evil-mode 1) (define-key evil-insert-state-map (kbd \u0026#34;C-g\u0026#34;) \u0026#39;evil-normal-state) (define-key evil-insert-state-map (kbd \u0026#34;C-h\u0026#34;) \u0026#39;evil-delete-backward-char-and-join)) (use-package evil-collection) ; Replaces the Default Undo System. (use-package undo-tree) (global-undo-tree-mode 1) Download Links https://www.gnu.org/software/emacs/ https://github.com/doomemacs/doomemacs https://github.com/polybar/polybar Other Useful Programs https://wiki.archlinux.org/title/unclutter Application that hides your cursor when not moving the mouse. https://aur.archlinux.org/packages/xkeysnail Application that allows you to remap key commands for programs. https://xmonad.org/ My preferred non-EXWM tiling window manager, if you are intered in trying on out. ","date":"2022-12-22","permalink":"/posts/emacswithexwm/","section":"Posts","summary":"Introduction In my experience, every hobby has a few coreâ€¦ disagreements. Usually these are small and relatively benign differences based on personal preference, with members of that community advocating for their prefered solution.","title":"Diving into Emacs with EXWM"},{"content":"","date":"2022-12-22","permalink":"/tags/keyboard_centric_workflow/","section":"Tags","summary":"","title":"Keyboard_Centric_Workflow"},{"content":"","date":"2022-09-28","permalink":"/categories/cooking--nutrition/","section":"Categories","summary":"","title":"Cooking-\u0026-Nutrition"},{"content":"","date":"2022-09-28","permalink":"/tags/meal_prep/","section":"Tags","summary":"","title":"Meal_Prep"},{"content":" Introduction I have been doing a lot of sous vide cooking over the past few months. Generally with excellent results. The convenience of being able to simply drop something in a tub of water for a few hours, with no risk of over cooking, need to stir, or other maintenance is extremely appealing to me. Moreover, now that I am reorganizing my life to try and be a bit healthier, I find myself gravitating towards having a set of â€œfiller meals\u0026#34; to eat throughout the week. Meal prepping for me, was the natural next step of this style of cooking. The ability to pull a premade entree out of the freezer, drop it in the cooker, and forget about it was too good to ignore.\nThis post documents me prepping the main portion of my entire month\u0026#39;s lunch \u0026amp; dinners. Roughly 30 chicken breasts, along with some general thoughts on this style of meal prepping in general.\n## Preparation\nI like to start by thoroughly cleaning my counter and sink with soap, and water, and then again with bleach and water. After this I lay out all the major items I need. I am specifically trying to avoid looking for things once I have started working with the raw chicken.\n![A stainless steel sink filled with raw chicken breast](https://github.com/Iron-Shark/Iron-Shark.github.io/blob/main/_assets/2022-09-30/PXL_20220930_152451568.jpg?raw=true) So the reason I stressed the thorough cleaning earlier is that I prefer to wash my chicken before freezing it. The type of fresh chicken breast I buy tends to develop a bit of â€¦ slime, for lack of a better word. Having worked in an industrial style kitchen when I was younger, I learned to do this, cleaning the sink well enough to hold the raw food, and then just put the chicken directly in the sink. It makes it much easier to process this much food.\n![cleaned and trimmed chicken breast stacked neatly in trays](https://github.com/Iron-Shark/Iron-Shark.github.io/blob/main/_assets/2022-09-30/PXL_20220930_154702318.jpg?raw=true) After cleaning I trim the chicken breast, and put them on trays to be refrigerated while I make the seasoning mix.\n![a mix a pepper washed an layed out on a cutting board](https://github.com/Iron-Shark/Iron-Shark.github.io/blob/main/_assets/2022-09-30/cropped-1.jpg?raw=true) ![the peppers cut into chunks and put into cups for use wit an immersion blender](https://github.com/Iron-Shark/Iron-Shark.github.io/blob/main/_assets/2022-09-30/PXL_20220930_145840432.jpg?raw=true) I first wash and then chop all the peppers into large chunks. Putting them into a container roughly the size of my immersion blender with a smallish amount of olive oil. Blend them until they are a consistent paste.\n![a bowl of dry seasonings](https://github.com/Iron-Shark/Iron-Shark.github.io/blob/main/_assets/2022-09-30/PXL_20220930_144445529.jpg?raw=true) I add my [Italian Seasoning](https://ironshark.org/2022/09/20/Bulk-chicken-meal-prep.html#h-italian-season) blend into a bowl along with the Onion Powder, Garlic Powder, Salt, and Pepper.\n![the previous bowl of seasonings, with the blended pepper mixture added](https://github.com/Iron-Shark/Iron-Shark.github.io/blob/main/_assets/2022-09-30/PXL_20220930_150459928.jpg?raw=true) ![the previous mixture, with chopped garlic added](https://github.com/Iron-Shark/Iron-Shark.github.io/blob/main/_assets/2022-09-30/PXL_20220930_150606031.jpg?raw=true) Add the blended peppers, and chopped garlic to the other seasonings.\n![bowl containing the spice mixture after being thouroughly mixed](https://github.com/Iron-Shark/Iron-Shark.github.io/blob/main/_assets/2022-09-30/PXL_20220930_150747646.jpg?raw=true) Mix thoroughly, adding oil as needed. Trying to achieve a faily liquid consistency.\n## Packaging ![an kitchen counter with a vacum sealer, vacum bags, and a pair of kitchen shears on it](https://github.com/Iron-Shark/Iron-Shark.github.io/blob/main/_assets/2022-09-30/PXL_20220930_160751842.jpg?raw=true) I cut 30 bags to length, and sealed one end. Stacking them so they would be easily accessible.\n![the counter with one of the trays of chicken on it, with a chicken breast being added to the bowl of seasonings](https://github.com/Iron-Shark/Iron-Shark.github.io/blob/main/_assets/2022-09-30/PXL_20220930_164709316.jpg?raw=true) ![the counter filled with bagged chicken breasts](https://github.com/Iron-Shark/Iron-Shark.github.io/blob/main/_assets/2022-09-30/PXL_20220930_170946503.jpg?raw=true) Using gloves to prevent soaking my hands in the seasoning solution. I give each breast a good coat of seasoning, and then put them in a bag. Once All of them have been put in a bag, spread the remaining seasoning (if there is any) among the bags. Then seal all the bags, and put them in the freezer.\n## Final Thoughts ![the now sealed chicken breast stacked in the bottom shelf of a freezer](https://github.com/Iron-Shark/Iron-Shark.github.io/blob/main/_assets/2022-09-30/PXL_20220930_175924954.jpg?raw=true) 30 Packaged Chicken Breasts, stacked in the freezer.\nOne of my big concerns with sous vide style cooking is the amount of plastic waste it can create. Originally I was using single use ziplock bags, but both the cost, and wastefulness made me want to find a better solution. I considered reusable ziplock bags, and even bought some. But they sprang a leak each of the times I tried to use one. I don\u0026#39;t think they are generally made to withstand the heat of a submersion cooker. There are reusable bages specifically for sous vide cookers but they are generally $40 or more. Which would prevent me from doing any sort of meal prepping. Finally I found a solution that works really well for me. [VestaEco](https://www.amazon.com/dp/B08R3QBPJF) are compostable vacuum seal bags. So I am not as worried about going through the number of bags that I do, and the price is much more reasonable.\nI wanted to briefly discuss the why of doing all this. Achieving a healthy weight and level of physical fitness are important to me, and I want to build sustainable habits when I can. I have not had a great relationship with food, often relying on take-out or other pre-made meals. Since I have started cooking my own food, I found a much greater feeling of control about what I eat. The realization that \u0026#34;not every meal needs to be a party\u0026#34; was hugely impactful for me. The idea is that while it can be wonderful to have large, fancy, or complicated meals. It can be beneficial to have a smaller number of relatively simple meals make up the core of what I eat.\nGenerally, these chicken breasts will make up the main entree of my lunch and dinner for Mondays, Tuesdays, Thursday, and Fridays. Paired with a large helping of a fresh vegetable, usually sauteed. They are flavorful, but familiar enough to be a bit boring. I believe this has really helped me avoid overeating. My variety comes from the rotation selection of veggies, and at a more macro level from my \u0026#34;cheat days\u0026#34;. On Wednesday I go to a restaurant of my choice, lately I have been getting fried chicken from Zenders in Frankenmuth, and over the weekend I make a larger and more complex meal, since I have two days to eat it.\n## Resources \u0026amp; Recipe ### Vacuum Bags Amazon Link : [VestaEco](https://www.amazon.com/dp/B08R3QBPJF)\n### Italian Seasoning\n4 Tbsp Oregano 3 Tbsp Marjoram 3 Tbsp Basil 2 Tbsp Thyme 2 Tbsp Rosemary 2 Tbsp Sage ### Other Spices\n2 Tbsp Onion Powder 2 Tbsp Garlic Powder 4 Tsbp Cayne 6 Tbsp Salt 8 Tbsp Black Pepper 12 Tbsp Chopped Garlic 10 Habanero Peppers 15 Jalapeno Peppers Olive Oil as needed for consistency ","date":"2022-09-28","permalink":"/posts/bulkchickenprep/","section":"Posts","summary":"Introduction I have been doing a lot of sous vide cooking over the past few months. Generally with excellent results. The convenience of being able to simply drop something in a tub of water for a few hours, with no risk of over cooking, need to stir, or other maintenance is extremely appealing to me.","title":"Sous Vide Bulk Meal Prep"},{"content":"","date":"2022-09-28","permalink":"/tags/sous_vide/","section":"Tags","summary":"","title":"Sous_Vide,"},{"content":"","date":"2022-09-13","permalink":"/tags/functional/","section":"Tags","summary":"","title":"Functional"},{"content":"","date":"2022-09-13","permalink":"/tags/linux_for_beginners/","section":"Tags","summary":"","title":"Linux_for_beginners"},{"content":" As someone who is still trying to break into the world of Linux Power Users, System Admins, and Programmers. I have often found myself needing to reinstall my operating system. Usually to reset dependencies broken by trying to install a new package, or otherwise change my system. This was slow, time consuming, and a deterrent to experimentation. NixOS offers a solution, functional package management.\nNixos is one of two GNU/Linux distributions that use a functional package management system. I plan on writing about the specifics of this in a separate post, so for now I will focus on the effects of it. Rather than install binaries globally. They are kept in a separate directory called the Nix store, and are then connected to the user environment and other applications via symlinks. This provides three main benefits.\nFirst, atomic upgrades. There is no change to existing packages during an up date. So there is no chance for a package to be broken by a system interruption. Second, you can have multiple versions of a package installed simultaneously, and be able to actively use them all. Third, and most importantly to me. You can revert to an earlier system configuration. NixOS uses a system called generations. So if I install a package and find that it creates issues with my existing system, I can revert those changes without worrying about lost or changed dependencies. Greatly increasing my confidence in experimentation.\nInstallation was extremely easy. They recently released a new GUI installer that was even easier to use than the previous one. The ability to declarative install packages using /etc/nixos/configuration.nix makes keeping track of what changes I am making way simpler, than with an imperative installer like apt. My plan is to use NixOS as a learning tool. Starting with simple skills like using a tiling window manager, and terminal based system configuration tools. Before eventually moving on to things like basic programming skills, setting up a development environment, and living in Emacs.\nCurrently I am using Xmonad nested within XFCE4. A combination I would strongly recommend to any beginner considering switching to a tiling window manager for the first time. It is easily configurable in NixOS by adding a single line to your /etc/nixos/configuration.nix and then selecting the combination from the login greeter. In particular being able to use and learn Xmonads controls while still having the GUI configuration appletts for things like Wifi and sound makes life a lot easier. The only issue I have found is that you can not use the default M-S-q (alt-shift-q) to log out. As this will freeze your workspace, and require a hard reboot. I have linked my configuration file repository below.\nGithub Repository : https://github.com/Iron-Shark/Technonomicon\n","date":"2022-09-13","permalink":"/posts/nixosfirstimpressions/","section":"Posts","summary":"As someone who is still trying to break into the world of Linux Power Users, System Admins, and Programmers. I have often found myself needing to reinstall my operating system.","title":"NixOS First Impressions"},{"content":" Linux based operating systems, including Debian, Arch, and NixOS are being used by an increasing number of people without a technical background. These operating systems have a reputation of requiring a high level of knowledge simply to perform common user actions, making them somewhat unapproachable for the beginner. The common wisdom given to someone who wants to begin learning how to use a Linux based system is to install it on a spare computer, or to dual boot your current computer. In my experience neither of these options do a great job of creating a friendly learning environment.\nThe problem that I experienced with both of these methods is that simply starting to practice required time and effort that often deterred me from actually doing so. Once practicing I was completely locked out of my normal operating system and the tools I was used to using with Windows OS. I often found myself frustrated and quitting after only a small amount of practice. Having found myself \u0026#34;locked\u0026#34; in an operating system I could barely get to function. As a non-tech user diving into the terminal was overwhelming. The solution in my case came from an unexpected source, Windows Subsystem for Linux.\nWindows Subsystem for Linux commonly referred to as WSL and, WSL2 it\u0026#39;s more fully featured successor provide what I believe was the key to my successfully learning the core skills required by Linux based operating systems. Ease of practice. I was suddenly able to use a Linux terminal in my normal Windows workspace, and treat it as I would any other tool. I could have it open in the background and dedicate short busts of time to learning the basics, while using my already configured Windows tools to search for answers to problems, and take notes. Then as I became more comfortable, I was able to use Remote Desktop Protocol (RDP) to do the same with a full virtual machine.\nThe other tool that really helped me was the website LinuxJourney.com . This site provides a solid foundation of knowledge, and an easy to follow path to progress through. While using WSL2 to practice the commands as I learned them. Together these simplified things enough that it felt easy to practice, and I quickly felt comfortable enough to make the jump to a full time Linux desktop.\nThe key was I didn\u0026#39;t need any knowledge of these things prior to this to set it up. It can be overwhelming to a novice to be confronted with a new subject and get stuck in a loop of \u0026#34;if I want to learn this, then I need to learn that first\u0026#34;. I will link the used guides below, but it was all extremely simple for a normal Windows user. I think the ability for a non-power user to follow simple guides to set something like this up, and be able to practice is what makes WSL such a great tool for people looking to learn more about Computer Science, Programming, or System Administration.\nResources These are the resources I found most helpfull while going through this process.\nhttps://linuxjourney.com : A great tutorial website I used to learn the basics of Linux. https://docs.microsoft.com/en-us/windows/wsl/install : Windows Documentation on WSL. https://www.youtube.com/watch?v=_fntjriRe48 : Video guide for first time configuration of WSL. https://www.youtube.com/watch?v=IL7Jd9rjgrM\u0026amp;t=182s : Video guide for setting up a RDP connection. ","date":"2022-09-04","permalink":"/posts/linuxjourney/","section":"Posts","summary":"Linux based operating systems, including Debian, Arch, and NixOS are being used by an increasing number of people without a technical background. These operating systems have a reputation of requiring a high level of knowledge simply to perform common user actions, making them somewhat unapproachable for the beginner.","title":"A beginners doorway to Linux."},{"content":" As a part of writing the \u0026#34;https://ironshark.org/technology/2022/09/04/linux-journey.html\u0026#34; article, and my larger project of switching to https://nixos.org/ for daily use. I decided to go through all of the https://linuxjourney.com/ lessons again. This time from the perspective of someone familiar with the fundamentals, and experienced with basic use of a Linux based operating system. For perspective I have basic user experience with both https://www.debian.org/ and https://archlinux.org/, and have used both as my primary operating system.\nMy overall impression remains that it is a great resource. I wanted to add an additional caveat to that though. If you are simply trying to get your feet wet, or do simple interactions with a Linux machine that is maintained for you. Then it is likely enough to give you the skills needed to interact with a preconfigured system. If however you are trying to configure a personal computer, or build a set of tools for professional projects. Then you are definitely going to need an additional resource, namely. Your chosen distribution\u0026#39;s user manual.\nI mention this specifically because it is something that could be easily overlooked or misunderstood by someone coming from a Windows OS background. This is due to the fact that Linux is only the core of the operating system. So fittingly Linux Journey really only discusses the Linux core utilities that are found on almost all distributions, with only a passing mention of the differences between them. It will teach how to use the tools that come with Linux, but not what to do with those tools to achieve your goals. Overall, I\u0026#39;m glad I went through the tutorials again. I feel like I picked up a bit more information now that I have the context to appreciate, and my opinion overall is the same. Linux Journey is an excellent resource. Just make sure that you are also consulting your chosen disto\u0026#39;s user manual, FAQ\u0026#39;s, and tutorials.\n","date":"2022-09-04","permalink":"/posts/linuxjourneyretrospective/","section":"Posts","summary":"As a part of writing the \u0026#34;https://ironshark.org/technology/2022/09/04/linux-journey.html\u0026#34; article, and my larger project of switching to https://nixos.org/ for daily use. I decided to go through all of the https://linuxjourney.com/ lessons again.","title":"A Linux Journey Retrospective"},{"content":"","date":"2022-09-04","permalink":"/categories/personal/","section":"Categories","summary":"","title":"Personal"},{"content":"","date":"2022-09-04","permalink":"/tags/site_update/","section":"Tags","summary":"","title":"Site_Update"},{"content":" Personal blogging can take a lot of forms, and the goals for each site can vary wildly from person to person. For me, those goals are.\nCreate a public facing outlet for written works. This isn\u0026#39;t to say that I expect this blog to become wildly popular. I don\u0026#39;t. Rather the \u0026#34;threat\u0026#34; of unknown people seeing what I have written encourages me to try and publish things in a finished state. Having never really needed to do that before I hope that this will improve my writing, storytelling, and general communication skills. Largely it amounts to a creative writing exercise.\nShare project reports, and the lessons learned from them. In the hopes that others can one day avoid the mistakes I make as part of my learning process. More generally, I hope that the process of creating these reports will encourage me to better document my projects for later reference, and to be able to share that information with friends and collaborators. Also having a measurable sense of progress on those projects could be a great source of motivation.\nCreate a personal \u0026amp; professional gallery of completed work. This is a longer term goal, but as I complete more projects. I hope to begin curating them into a gallery or portfolio highlighting my major achievements. The overall goal being that the contents of my about me page, which should also include a CV will act as an introduction to my body of work.\n","date":"2022-09-04","permalink":"/posts/whyblog/","section":"Posts","summary":"Personal blogging can take a lot of forms, and the goals for each site can vary wildly from person to person. For me, those goals are.\nCreate a public facing outlet for written works.","title":"Who, what, and Why. Creating a personal blog."},{"content":"","date":"0001-01-01","permalink":"/authors/","section":"Authors","summary":"","title":"Authors"},{"content":"","date":"0001-01-01","permalink":"/series/","section":"Series","summary":"","title":"Series"}]